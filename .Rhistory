lunch <- read.csv("/clean_data/NOV14_cleaned_edu.csv")
library(ggplot2)    # graphics package
library(dplyr)      # joining data frames and data manipulation
library(readr)      # quickly reads files into R
library(sf)         # simple features package for spatial data
library(leaps)
library(tidyr)
library(corrplot)
require(mosaic)
library(patchwork)
####################################################
# Matching function
find_match_general <- function(name, data, search_col, return_col) {
if(name == "") {
return(NA)
}
if(grepl("^NYC GEOG DIST #", name, ignore.case = TRUE)) {
exact_match <- which(data[[search_col]] == name)
if(length(exact_match) == 1) {
return(data[[return_col]][exact_match])
}
}
words <- unlist(strsplit(name, " "))
for (i in 1:length(words)) {
search_str <- paste(words[1:i], collapse = " ")
matches <- grep(paste("^", search_str, sep = ""), data[[search_col]], ignore.case = TRUE)
if (length(matches) == 1) {
return(data[[return_col]][matches])
}
}
return(NA)  # Return NA if no unique match is found
}
# annual lunch and expenditure
lunch <- read.csv("/clean_data/NOV14_cleaned_edu.csv")
# annual lunch and expenditure
lunch <- read.csv("clean_data/NOV14_cleaned_edu.csv")
####################################################
# annual lunch and expenditure
lunch <- read.csv("/clean_data/NOV28_cleaned_edu.csv")
# annual lunch and expenditure
lunch <- read.csv("~/clean_data/NOV28_cleaned_edu.csv")
lunch <- read.csv("NOV28_cleaned_edu.csv")
lunch <- read.csv("main/clean_data/NOV28_cleaned_edu.csv")
lunch <- read.csv("id_name.csv")
lunch <- read.csv("clean_data/NOV28_cleaned_edu.csv")
library(ggplot2)    # graphics package
library(dplyr)      # joining data frames and data manipulation
library(readr)      # quickly reads files into R
library(sf)         # simple features package for spatial data
library(leaps)
library(tidyr)
library(corrplot)
require(mosaic)
library(patchwork)
####################################################
# Matching function
find_match_general <- function(name, data, search_col, return_col) {
if(name == "") {
return(NA)
}
if(grepl("^NYC GEOG DIST #", name, ignore.case = TRUE)) {
exact_match <- which(data[[search_col]] == name)
if(length(exact_match) == 1) {
return(data[[return_col]][exact_match])
}
}
words <- unlist(strsplit(name, " "))
for (i in 1:length(words)) {
search_str <- paste(words[1:i], collapse = " ")
matches <- grep(paste("^", search_str, sep = ""), data[[search_col]], ignore.case = TRUE)
if (length(matches) == 1) {
return(data[[return_col]][matches])
}
}
return(NA)  # Return NA if no unique match is found
}
####################################################
##             1. Read in Data
####################################################
# annual lunch and expenditure
lunch <- read.csv("clean_data/NOV28_cleaned_edu.csv")
lunch <- lunch %>%
filter(year == 2021) %>%
unique()
# id_name is used to merge data
id_name <- read.csv("clean_data/id_name.csv")
id_name <- id_name[-121,]
# annual salary
salary <- read.csv("clean_data/f_avg_salary_21(k-12) - Copy.csv")
salary <- pivot_wider(salary, id_cols = c(report_school_year, district_name),
names_from = staff_ind_desc,
values_from = avg_sal)
salary <- merge(salary, id_name, by = "district_name")
salary <- salary %>%
rename("Teacher_Sal" = "Classroom Teacher") %>%
rename("Princ_Sal" = "Principals & Asst. Principals") %>%
rename("id_name" = "state_district_id")
# monthly covid cases and learning mode
monthly.cases.mode <- read.csv("clean_data/monthly.cases.mode.csv")
monthly.cases.mode$id_name <- sapply(monthly.cases.mode$District.Name, function(name) {
find_match_general(name, id_name, "district_name", "state_district_id")
})
monthly.cases.mode <- filter(monthly.cases.mode, !is.na(id_name))
yearly.cases.mode <- monthly.cases.mode %>%
group_by(id_name) %>%
summarise(
NewCasesStudents = sum(NewCasesStudents, na.rm = TRUE),
NewCasesTeachers = sum(NewCasesTeachers, na.rm = TRUE),
NewCasesStaff = sum(NewCasesStaff, na.rm = TRUE),
Norm.New.Stud = sum(Norm.New.Stud, na.rm = TRUE),
share_inperson = ifelse(all(is.na(share_inperson)), NA, mean(share_inperson, na.rm = TRUE)),
share_hybrid = ifelse(all(is.na(share_hybrid)), NA, mean(share_hybrid, na.rm = TRUE)),
share_virtual = ifelse(all(is.na(share_virtual)), NA, mean(share_virtual, na.rm = TRUE))
)
